// Code generated by MockGen. DO NOT EDIT.
// Source: ./external/memstore/cron_job.go

// Package memstore is a generated GoMock package.
package memstore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCronJob is a mock of CronJob interface.
type MockCronJob struct {
	ctrl     *gomock.Controller
	recorder *MockCronJobMockRecorder
}

// MockCronJobMockRecorder is the mock recorder for MockCronJob.
type MockCronJobMockRecorder struct {
	mock *MockCronJob
}

// NewMockCronJob creates a new mock instance.
func NewMockCronJob(ctrl *gomock.Controller) *MockCronJob {
	mock := &MockCronJob{ctrl: ctrl}
	mock.recorder = &MockCronJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronJob) EXPECT() *MockCronJobMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockCronJob) AddTask(spec string, cmd func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTask", spec, cmd)
}

// AddTask indicates an expected call of AddTask.
func (mr *MockCronJobMockRecorder) AddTask(spec, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockCronJob)(nil).AddTask), spec, cmd)
}

// End mocks base method.
func (m *MockCronJob) End() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End")
}

// End indicates an expected call of End.
func (mr *MockCronJobMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockCronJob)(nil).End))
}

// Start mocks base method.
func (m *MockCronJob) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockCronJobMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronJob)(nil).Start))
}
